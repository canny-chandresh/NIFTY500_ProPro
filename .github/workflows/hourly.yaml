name: Hourly Train & Reports

on:
  # ── Schedules are in UTC ───────────────────────────────────────────────
  schedule:
    # Pre-open warmup @ 09:05 IST ≈ 03:35 UTC (Mon–Fri)
    - cron: "35 3 * * 1-5"
    # Hourly loop (gated by market_hours in code) — at :15 UTC every hour
    - cron: "15 * * * 1-5"
    # EOD summary @ 17:05 IST ≈ 11:35 UTC (Mon–Fri)
    - cron: "35 11 * * 1-5"
    # Weekly rollup: Saturday 10:00 IST ≈ 04:30 UTC
    - cron: "30 4 * * 6"
    # Month-end rollup: last day 18:00 IST ≈ 12:30 UTC
    - cron: "30 12 28-31 * *"
  workflow_dispatch: {}

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    env:
      # ——— Telegram (must be set in repo secrets) ———
      TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
      TG_CHAT_ID:  ${{ secrets.TG_CHAT_ID }}

      # ——— Error logger & housekeeping knobs ———
      ERRORLOG_HTTP_PROBE: "true"
      ERRORLOG_MAX_LOGS: "60"
      ERRORLOG_MAX_MANIFESTS: "300"
      ERRORLOG_TRADE_RETENTION_DAYS: "120"
      # set to "true" later if you want the job to fail on big resource spikes
      ERRORLOG_FAIL_ON_SPIKE: "false"
      ERRORLOG_MEM_SPIKE_MB: "700"
      ERRORLOG_FD_SPIKE: "100"
      ERRORLOG_THREAD_SPIKE: "200"
      ERRORLOG_CONN_SPIKE: "200"

      # ——— Archiver: keep last 24 months active (older → archives/) ———
      ARCHIVER_RETENTION_MONTHS: "24"

      # Ensure src/ is importable for python -m calls
      PYTHONPATH: ${{ github.workspace }}/src

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show repo tree (sanity)
        run: |
          echo "== root =="
          ls -la
          echo "== src =="
          ls -la src || true
          echo "== datalake =="
          ls -la datalake || true
          echo "== reports =="
          ls -la reports || true

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # safety: ensure these are present
          pip install pandas numpy requests psutil pytest || true

      # ───────────────────────────────────────────────────────────────────
      # 0) Pre-open warmup (runs once per day at 09:05 IST via cron)
      # ───────────────────────────────────────────────────────────────────
      - name: Pre-open warmup
        if: github.event.schedule == '35 3 * * 1-5'
        run: |
          python - <<'PY'
          import sys; sys.path.append("src")
          from entrypoints import daily_update
          daily_update(preopen=True)
          PY

      # ───────────────────────────────────────────────────────────────────
      # 1) Hourly recommendation session (gated in code by market_hours)
      # ───────────────────────────────────────────────────────────────────
      - name: Hourly run (gated)
        run: |
          python - <<'PY'
          import sys; sys.path.append("src")
          from entrypoints import run_paper_session
          # top_k comes from config inside pipeline; you can override here if needed.
          run_paper_session(top_k=5)
          PY

      # ───────────────────────────────────────────────────────────────────
      # 2) EOD summary + housekeeping (runs once at 17:05 IST via cron)
      # ───────────────────────────────────────────────────────────────────
      - name: EOD summary + housekeeping
        if: github.event.schedule == '35 11 * * 1-5'
        run: |
          python - <<'PY'
          import sys; sys.path.append("src")
          from entrypoints import eod_task, after_run_housekeeping
          eod_task()
          after_run_housekeeping()
          PY

      # ───────────────────────────────────────────────────────────────────
      # 3) Weekly / Monthly rollups (triggered by their crons)
      # ───────────────────────────────────────────────────────────────────
      - name: Weekly rollup (Sat)
        if: github.event.schedule == '30 4 * * 6'
        run: |
          python - <<'PY'
          import sys; sys.path.append("src")
          from entrypoints import periodic_reports_task
          periodic_reports_task(kind="weekly")
          PY

      - name: Month-end rollup (last day)
        # crude month-end check: run on 28–31 but only if tomorrow is a new month
        if: github.event.schedule == '30 12 28-31 * *'
        run: |
          python - <<'PY'
          import sys, datetime as dt
          sys.path.append("src")
          from entrypoints import periodic_reports_task
          today = dt.datetime.utcnow().date()
          tomorrow = today + dt.timedelta(days=1)
          if tomorrow.month != today.month:
              periodic_reports_task(kind="monthly")
          else:
              print("Not month-end, skipping.")
          PY

      # ───────────────────────────────────────────────────────────────────
      # 4) Smoke tests (non-fatal so early wiring doesn't block you)
      # ───────────────────────────────────────────────────────────────────
      - name: Run smoke tests (pytest)
        continue-on-error: true
        run: |
          if [ -d tests ]; then
            pytest -q || true
          else
            echo "No tests/ directory yet — skipping."
          fi

      # ───────────────────────────────────────────────────────────────────
      # 5) Upload artifacts (logs, metrics, backtests, explain, news)
      # ───────────────────────────────────────────────────────────────────
      - name: Upload run logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs_${{ github.run_id }}
          path: |
            reports/logs/*.log
            reports/logs/errors_only_*.txt
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload metrics & manifests
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: metrics_${{ github.run_id }}
          path: |
            reports/metrics/*.json
            reports/metrics/*.txt
          if-no-files-found: ignore
          retention-days: 14

      - name: Upload backtests & explain
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: analytics_${{ github.run_id }}
          path: |
            reports/backtests/*.json
            reports/explain/*.json
          if-no-files-found: ignore
          retention-days: 14

      - name: Upload news snapshot
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: news_${{ github.run_id }}
          path: datalake/news_sentiment.csv
          if-no-files-found: ignore
          retention-days: 7
