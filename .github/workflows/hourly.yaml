name: Hourly + Preopen + EOD + Weekly + MonthEnd

on:
  workflow_dispatch: {}
  schedule:
    # Pre-open warmup (Gift Nifty/news prep) — 09:10 IST ≈ 03:40 UTC
    - cron: "40 3 * * 1-5"
    # Market hours hourly loop — 09:45–15:45 IST ≈ 04:15–10:15 UTC (top of hour + :15)
    - cron: "15 4-10 * * 1-5"
    # EOD compile & notify — 16:05 IST ≈ 10:35 UTC
    - cron: "35 10 * * 1-5"
    # Weekly (Saturday 18:00 IST ≈ 12:30 UTC)
    - cron: "30 12 * * 6"
    # Month-end (runs 28–31 at 18:00 IST; script checks last-day)
    - cron: "30 12 28-31 * *"

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    env:
      PYTHONPATH: ${{ github.workspace }}/src
      TZ: UTC
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show tree (sanity)
        run: |
          echo "== repo root =="; ls -la
          echo "== src =="; ls -la src || true
          echo "== workflows =="; ls -la .github/workflows || true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # light extras (fail-safe)
          pip install pandas numpy requests streamlit pyyaml shap scikit-learn || true

      # ---------- Pre-open guard (runs every time, but it’s cheap) ----------
      - name: Pre-open warmup (Gift Nifty/news) + Data SLI
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID:  ${{ secrets.TG_CHAT_ID }}
        run: |
          python - <<'PY'
          import os, sys, json, datetime as dt
          sys.path.append("src")
          from sli import compute_sli, alert_if_bad
          try:
              from telegram import send_recommendations as tg_send
              def send(header): tg_send(header=header)
          except Exception:
              send = None
          sli = compute_sli()
          alert_if_bad(sli, tg_send=send)
          # mark whether this run is in market window or preopen/eod by UTC clock
          now = dt.datetime.utcnow()
          # Market window ≈ 04–10 UTC (IST 09:30–15:30); EOD ≈ 10:35 UTC
          is_market = 4 <= now.hour <= 10
          is_eod = (now.hour == 10 and now.minute >= 30)
          print(json.dumps({"utc": now.isoformat()+"Z", "is_market": is_market, "is_eod": is_eod}))
          PY

      # ---------- Main pipeline ----------
      - name: Run pipeline (eligibility, calendars, HRP, explainability, Telegram)
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID:  ${{ secrets.TG_CHAT_ID }}
        run: |
          python - <<'PY'
          import sys
          sys.path.append("src")
          from pipeline_ai import run_auto_and_algo_sessions
          a,b = run_auto_and_algo_sessions()
          print({"AUTO": a, "ALGO": b})
          PY

      # ---------- EOD / backtests / reports ----------
      - name: EOD & walk-forward compile (always safe to run)
        run: |
          python - <<'PY'
          import sys, os, json, pandas as pd
          sys.path.append("src")
          from backtester import walkforward_summary
          dl = "datalake"
          p = os.path.join(dl, "paper_trades.csv")
          if os.path.exists(p):
              d = pd.read_csv(p)
          else:
              d = pd.DataFrame(columns=["when_utc","pnl"])
          walk = walkforward_summary(d)
          print(json.dumps(walk, indent=2))
          PY

      # ---------- Artifacts ----------
      - name: Package artifacts
        run: |
          mkdir -p artifacts
          [ -d reports ] && cp -r reports artifacts/reports || true
          [ -d datalake ] && mkdir -p artifacts/datalake && cp -r datalake/_manifests artifacts/datalake/ 2>/dev/null || true
          # Tail error log for quick view
          errf=$(ls -1t reports/logs/errors_only_* 2>/dev/null | head -n1 || true)
          if [ -n "$errf" ]; then cp "$errf" artifacts/; fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: NIFTY500_ProPro_${{ github.run_id }}
          path: artifacts
          retention-days: 14
