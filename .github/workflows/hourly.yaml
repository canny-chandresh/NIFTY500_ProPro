name: Hourly Train & Daily Notify

on:
  schedule:
    - cron: "15 * * * 1-5"   # every weekday at :15
  workflow_dispatch: {}       # enables the "Run workflow" button

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure datalake exists (unpack once)
        run: |
          if [ ! -d "datalake" ]; then
            echo "No datalake/ found; unpacking bootstrap ZIP…"
            if [ ! -f "datalake-bootstrap.zip" ]; then
              echo "❌ datalake-bootstrap.zip not found in repo root. Upload it via 'Add file'."
              exit 0
            fi
            sudo apt-get update -y >/dev/null 2>&1 || true
            sudo apt-get install -y unzip >/dev/null 2>&1 || true
            unzip -o datalake-bootstrap.zip -d .
            # If your zip has a nested folder, auto-flatten it:
            if [ -d "NIFTY500_ProPro/datalake" ]; then
              mv NIFTY500_ProPro/datalake ./ && rm -rf NIFTY500_ProPro
            fi
            echo "✅ Datalake ready:"
            ls -la datalake || true
          else
            echo "datalake/ already present; skipping unzip."
          fi

      - name: Show tree (sanity)
        run: |
          echo "== repo root =="
          ls -la
          echo "== src =="
          ls -la src || true
          echo "== workflows =="
          ls -la .github/workflows || true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (non-fatal)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Optional extras you may need later; keep non-fatal
          pip install yfinance ta || true

      - name: Run pipeline (defensive, never fail the job)
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID:  ${{ secrets.TG_CHAT_ID }}
        run: |
          python - <<'PY'
          import sys, traceback
          from pathlib import Path

          def safe(label, fn):
              print(f">> {label}")
              try:
                  fn()
                  print(f"<< {label} OK")
              except Exception as e:
                  print(f"<< {label} ERROR: {e}")
                  traceback.print_exc()

          # Allow importing from src/
          if Path("src").exists():
              sys.path.append("src")

          # Import modules defensively
          try:
              from entrypoints import daily_update, eod_task, periodic_reports_task, after_run_housekeeping
              from pipeline import run_paper_session
          except Exception as e:
              print("Import error:", e)
              traceback.print_exc()
              raise SystemExit(0)

          safe("daily_update()", lambda: daily_update())
          safe("run_paper_session()", lambda: run_paper_session(top_k=5))
          safe("eod_task()", lambda: eod_task())
          safe("periodic_reports_task()", lambda: periodic_reports_task())
          safe("after_run_housekeeping()", lambda: after_run_housekeeping())

          # Always exit 0 so early wiring issues don't fail the job
          raise SystemExit(0)
          PY
