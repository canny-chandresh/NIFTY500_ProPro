name: Hourly Train & Notify
on:
  schedule:
    - cron: "15 * * * 1-5"   # 15 past every hour on weekdays
  workflow_dispatch: {}

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: 25

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install yfinance pandas numpy pyyaml requests || true

      - name: Ingest light slices (daily/intraday/macro/options heartbeat)
        run: |
          python - <<'PY'
          import sys; sys.path.append("src")
          from config import CONFIG
          import data_ingest as di
          uni = CONFIG.get("universe", [])
          print(di.run_all(uni))
          PY

      - name: Run hourly picks (3:15 gate inside)
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID:  ${{ secrets.TG_CHAT_ID }}
        run: |
          python - <<'PY'
          import sys; sys.path.append("src")
          from entrypoints import hourly_live_or_paper
          out = hourly_live_or_paper(top_k=5)
          print(out)
          PY

      - name: EOD & periodic (safe no-op outside window)
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID:  ${{ secrets.TG_CHAT_ID }}
        run: |
          python - <<'PY'
          import sys; sys.path.append("src")
          from entrypoints import eod_task, periodic_reports_task, after_run_housekeeping
          print(eod_task())
          print(periodic_reports_task())
          print(after_run_housekeeping())
          PY

      - name: Auto Bug Fix (safe, non-fatal)
        run: |
          python - <<'PY'
          import sys; sys.path.append("src")
          import json
          try:
            from auto_bugfixer import main
            print("AUTO_FIX:", json.dumps(main(), indent=2))
          except Exception as e:
            print("Autofix missing:", e)
          PY
