name: Hourly Lean (Ingest ➜ Alphas ➜ Health ➜ Telegram)

on:
  schedule:
    - cron: "45 3-9 * * 1-5"   # hourly during market (IST 09:45–15:45)
    - cron: "30 11 * * 1-5"    # EOD window ~17:00 IST
  workflow_dispatch: {}

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    env:
      TZ: Asia/Kolkata
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas numpy scikit-learn pyarrow fastparquet requests yfinance ta
          pip install feedparser vaderSentiment

      - name: Ensure datalake exists (unpack once)
        run: |
          if [ ! -d "datalake" ] && [ -f "datalake-bootstrap.zip" ]; then
            unzip -o datalake-bootstrap.zip -d .
            echo "Bootstrapped datalake from ZIP."
          fi
          mkdir -p reports/debug

      - name: Ingest daily+intraday+macro (lean)
        run: |
          python - <<'PY'
          import sys; sys.path.append("src")
          from config import CONFIG
          import data_ingest as di
          uni = CONFIG.get("universe", [])
          print(di.run_all(uni))
          PY

      - name: Options ingest (NSE primary)
        run: |
          python - <<'PY'
          import sys; sys.path.append("src")
          import options_ingest
          print(options_ingest.fetch_and_store())
          PY

      - name: Compute fast alphas
        run: |
          python - <<'PY'
          import sys; sys.path.append("src")
          try:
            import feature_store
            from alpha.runtime import run_enabled_alphas
            from config import CONFIG
            ff = feature_store.get_feature_frame(CONFIG.get("universe", []))
            out = run_enabled_alphas(ff, fast_only=True)
            print({"alpha_cols": [c for c in out.columns if c.startswith("alpha_")]})
          except Exception as e:
            print("fast alphas error:", e)
          PY

      # ✅ Fixed: import healthcheck from src/
      - name: Healthcheck + Telegram
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID:  ${{ secrets.TG_CHAT_ID }}
        run: |
          python - <<'PY'
          import sys; sys.path.append("src")
          try:
            import healthcheck
            if hasattr(healthcheck, "main"):
              healthcheck.main(send_telegram=True)
            else:
              # fallback if your file exposes run()
              if hasattr(healthcheck, "run"):
                healthcheck.run(send_telegram=True)
              else:
                print("healthcheck imported but no main()/run().")
          except Exception as e:
            print("healthcheck error:", e)
          PY

      - name: EOD summary (only around 17:00 IST)
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID:  ${{ secrets.TG_CHAT_ID }}
        run: |
          python - <<'PY'
          import sys, datetime as dt; sys.path.append("src")
          from config import CONFIG
          try:
            ist = dt.datetime.utcnow() + dt.timedelta(hours=5, minutes=30)
            if ist.hour == 17 and ist.minute <= 15:
              from entrypoints import eod_task
              eod_task()
            else:
              print("Skipping EOD (not in 17:00 IST window).")
          except Exception as e:
            print("EOD task error:", e)
          PY

      - name: Upload health artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: hourly_artifacts
          path: |
            reports/**/*
            datalake/daily_hot.parquet
            datalake/intraday/5m/*.csv
            datalake/options/*.jsonl
            reports/debug/**
          if-no-files-found: warn
