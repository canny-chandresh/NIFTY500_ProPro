name: Nightly Heavy (Deep Train ➜ Discovery ➜ WF Backtests ➜ Reports)

on:
  schedule:
    - cron: "30 16 * * 1-5"   # ~22:00 IST
    - cron: "30 12 * * 6"     # Saturday weekly recap ~18:00 IST
    - cron: "0 13 28-31 * *"  # month-end recap window
  workflow_dispatch: {}

jobs:
  heavy:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    env:
      TZ: Asia/Kolkata
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (heavy)
        run: |
          python -m pip install --upgrade pip
          pip install pandas numpy scikit-learn xgboost lightgbm catboost
          pip install torch --index-url https://download.pytorch.org/whl/cpu
          pip install pyarrow fastparquet requests yfinance ta
          pip install optuna feedparser vaderSentiment

      - name: Ensure folders
        run: |
          mkdir -p reports/debug models datalake

      - name: Ingest (nightly refresh)
        run: |
          python - <<'PY'
          import sys; sys.path.append("src")
          from config import CONFIG
          import data_ingest as di
          print(di.run_all(CONFIG.get("universe", [])))
          PY

      - name: Options ingest (nightly)
        run: |
          python - <<'PY'
          import sys; sys.path.append("src")
          import options_ingest
          print(options_ingest.fetch_and_store())
          PY

      - name: Heavy training & calibrations
        run: |
          python - <<'PY'
          import sys, traceback; sys.path.append("src")
          try:
            from pipeline_ai import nightly_heavy_train
            nightly_heavy_train()
          except Exception as e:
            print("nightly_heavy_train error:", e); traceback.print_exc()
          PY

      - name: Discovery + (optional) auto-promote to shadow
        run: |
          python - <<'PY'
          import sys, traceback; sys.path.append("src")
          try:
            import discovery_scheduler
            discovery_scheduler.nightly()
          except Exception as e:
            print("discovery nightly error:", e); traceback.print_exc()
          PY

      - name: Walk-forward backtests (purged+embargoed)
        run: |
          python - <<'PY'
          import sys, traceback; sys.path.append("src")
          try:
            import backtest_wf
            backtest_wf.run_all()
          except Exception as e:
            print("WF backtest error:", e); traceback.print_exc()
          PY

      - name: Build reports (EOD/Weekly/Monthly)
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID:  ${{ secrets.TG_CHAT_ID }}
        run: |
          python - <<'PY'
          import sys, datetime as dt, calendar; sys.path.append("src")
          try:
            from entrypoints import eod_task, periodic_reports_task
          except Exception as e:
            print("entrypoints import error:", e); eod_task = periodic_reports_task = None

          # Always do EOD
          if eod_task:
            try: eod_task()
            except Exception as e: print("EOD error:", e)

          ist = dt.datetime.utcnow() + dt.timedelta(hours=5, minutes=30)
          # Weekly (Saturday)
          if periodic_reports_task and ist.weekday() == 5:
            try: periodic_reports_task(kind="weekly")
            except Exception as e: print("Weekly report error:", e)
          # Month-end
          last_day = calendar.monthrange(ist.year, ist.month)[1]
          if periodic_reports_task and ist.day == last_day:
            try: periodic_reports_task(kind="monthly")
            except Exception as e: print("Monthly report error:", e)
          PY

      # ✅ Optional nightly healthcheck too (same path-safe import)
      - name: Nightly Healthcheck (no-telegram)
        run: |
          python - <<'PY'
          import sys; sys.path.append("src")
          try:
            import healthcheck
            if hasattr(healthcheck, "main"):
              healthcheck.main(send_telegram=False)
            elif hasattr(healthcheck, "run"):
              healthcheck.run(send_telegram=False)
          except Exception as e:
            print("nightly healthcheck error:", e)
          PY

      - name: Upload nightly artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nightly_artifacts
          path: |
            reports/**/*
            datalake/**/*
            models/**/*
          if-no-files-found: warn
