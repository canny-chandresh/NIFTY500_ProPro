name: Nightly Heavy (Train + Discovery)

on:
  schedule:
    # ~16:05 UTC = 21:35 IST â€” after market close & EOD settles. Adjust as needed.
    - cron: "5 16 * * 1-5"
  workflow_dispatch: {}

jobs:
  nightly:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    env:
      TZ: Asia/Kolkata
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (heavy)
        run: |
          python -m pip install --upgrade pip
          pip install pandas numpy scikit-learn pyarrow fastparquet yfinance ta pyyaml
          pip install feedparser vaderSentiment || true
          # boosters + DL stacks
          pip install xgboost lightgbm catboost
          pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
          pip install einops torchmetrics

      # ---------- DATA REFRESH ----------
      - name: Ensure recent data is present
        run: |
          python - <<'PY'
          import sys; sys.path.append("src")
          from config import CONFIG
          import data_ingest as di
          uni = CONFIG.get("universe", [])
          print(di.run_all(uni))
          PY

      # ---------- FULL ALPHAS (nightly, not just fast) ----------
      - name: Compute all alphas (nightly)
        run: |
          python - <<'PY'
          import sys; sys.path.append("src")
          from config import CONFIG
          import feature_store
          from alpha.runtime import run_enabled_alphas
          ff = feature_store.get_feature_frame(CONFIG.get("universe", []))
          out = run_enabled_alphas(ff, fast_only=False)
          print({"alpha_cols": [c for c in out.columns if c.startswith("alpha_")]})
          PY

      # ---------- ANOMALY (IsolationForest) ----------
      - name: Anomaly detection
        run: |
          python - <<'PY'
          import sys; sys.path.append("src")
          from config import CONFIG
          import feature_store
          from engines.anomaly_iforest import run as run_anom
          ff = feature_store.get_feature_frame(CONFIG.get("universe", []))
          print(run_anom(ff))
          PY

      # ---------- DISCOVERY (nightly; weekly job uses same scheduler with longer horizon) ----------
      - name: Discovery & (optional) Auto-Promote
        run: |
          python - <<'PY'
          import sys; sys.path.append("src")
          from discovery.discovery_scheduler import nightly
          print(nightly())
          PY

      # ---------- BOOTSTRAP HEAVY ENGINES ----------
      - name: Bootstrap & Train heavy engines
        run: |
          python - <<'PY'
          import sys; sys.path.append("src")
          from engines.bootstrap_heavy import run
          print(run())
          PY

      # ---------- PERIODIC REPORTS (weekly/monthly if boundary) ----------
      - name: Periodic reports (weekly/monthly)
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID:  ${{ secrets.TG_CHAT_ID }}
        run: |
          python - <<'PY'
          import sys; sys.path.append("src")
          from entrypoints import periodic_reports_task, after_run_housekeeping
          periodic_reports_task()
          after_run_housekeeping()
          PY

      # ---------- ARTIFACTS ----------
      - name: Upload nightly artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nightly_heavy_artifacts
          path: |
            models/**
            reports/**
            datalake/**
          if-no-files-found: ignore
